{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/arsamsarabi/Sandbox/done-with-it/app/components/AppPicker.js\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport { palette, defaultStyles } from \"../config\";\nimport { AppText } from \"./AppText\";\nimport { Screen } from \"./Screen\";\nimport { PickerItem } from \"./PickerItem\";\nexport var AppPicker = function AppPicker(_ref) {\n  var icon = _ref.icon,\n      items = _ref.items,\n      placeholder = _ref.placeholder,\n      selectedItem = _ref.selectedItem,\n      onSelectItem = _ref.onSelectItem;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisibility = _useState2[0],\n      setModalVisibility = _useState2[1];\n\n  var handleItemPress = function handleItemPress(item) {\n    onSelectItem(item);\n    setModalVisibility(false);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(TouchableWithoutFeedback, {\n    onPress: function onPress() {\n      return setModalVisibility(true);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, icon && React.createElement(MaterialCommunityIcons, {\n    name: icon,\n    size: 24,\n    color: palette.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 20\n    }\n  }), React.createElement(AppText, {\n    style: styles.placeholder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 11\n    }\n  }, selectedItem ? selectedItem.label : placeholder), React.createElement(MaterialCommunityIcons, {\n    name: \"chevron-down\",\n    size: 20,\n    color: palette.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }\n  }))), React.createElement(Modal, {\n    visible: modalVisibility,\n    animationType: \"slide\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, React.createElement(Screen, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, React.createElement(Button, {\n    title: \"close\",\n    onPress: function onPress() {\n      return setModalVisibility(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  }), React.createElement(FlatList, {\n    data: items,\n    keyExtractor: function keyExtractor(item) {\n      return item.value.toString();\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(PickerItem, {\n        label: item.label,\n        onPress: function onPress() {\n          return handleItemPress(item);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }))));\n};\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: palette.lightGrey,\n    borderRadius: 24,\n    flexDirection: 'row',\n    width: '100%',\n    padding: 16,\n    marginVertical: 8\n  },\n  placeholder: {\n    marginLeft: 16,\n    flex: 1\n  }\n});","map":{"version":3,"sources":["/Users/arsamsarabi/Sandbox/done-with-it/app/components/AppPicker.js"],"names":["React","useState","MaterialCommunityIcons","palette","defaultStyles","AppText","Screen","PickerItem","AppPicker","icon","items","placeholder","selectedItem","onSelectItem","modalVisibility","setModalVisibility","handleItemPress","item","styles","container","text","label","value","toString","StyleSheet","create","backgroundColor","lightGrey","borderRadius","flexDirection","width","padding","marginVertical","marginLeft","flex"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { StyleSheet, TouchableWithoutFeedback, View, Modal, Button, FlatList } from 'react-native'\nimport { MaterialCommunityIcons } from '@expo/vector-icons'\n\nimport { palette, defaultStyles } from '../config'\nimport { AppText } from './AppText'\nimport { Screen } from './Screen'\nimport { PickerItem } from './PickerItem'\n\nexport const AppPicker = ({ icon, items, placeholder, selectedItem, onSelectItem }) => {\n  const [modalVisibility, setModalVisibility] = useState(false)\n\n  const handleItemPress = (item) => {\n    onSelectItem(item)\n    setModalVisibility(false)\n  }\n\n  return (\n    <>\n      <TouchableWithoutFeedback onPress={() => setModalVisibility(true)}>\n        <View style={styles.container}>\n          {icon && <MaterialCommunityIcons name={icon} size={24} color={palette.text} />}\n          <AppText style={styles.placeholder}>\n            {selectedItem ? selectedItem.label : placeholder}\n          </AppText>\n          <MaterialCommunityIcons name=\"chevron-down\" size={20} color={palette.text} />\n        </View>\n      </TouchableWithoutFeedback>\n      <Modal visible={modalVisibility} animationType=\"slide\">\n        <Screen>\n          <Button title=\"close\" onPress={() => setModalVisibility(false)} />\n          <FlatList\n            data={items}\n            keyExtractor={(item) => item.value.toString()}\n            renderItem={({ item }) => (\n              <PickerItem label={item.label} onPress={() => handleItemPress(item)} />\n            )}\n          />\n        </Screen>\n      </Modal>\n    </>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: palette.lightGrey,\n    borderRadius: 24,\n    flexDirection: 'row',\n    width: '100%',\n    padding: 16,\n    marginVertical: 8,\n  },\n  placeholder: {\n    marginLeft: 16,\n    flex: 1,\n  },\n})\n"]},"metadata":{},"sourceType":"module"}